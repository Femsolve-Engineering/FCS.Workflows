name: Build C++ Project - Linux

on:
  workflow_call:
    inputs:
      releaseVersion:
        required: true
        type: string
      shellScriptPath:
        required: true
        type: string
      upload_url:
        required: true
        type: string

jobs:
  build-and-archive:
    runs-on: ubuntu-22.04 # GLIBC compatibility with python-3.11-bullseye image

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          submodules: 'recursive' # Fetch Git submodules

      - name: Git LFS Pull
        run: git lfs pull

      - name: Install dependencies
        run: |
          sudo apt-get update && sudo apt-get install -y software-properties-common
          sudo apt-get install -y make gcc g++ wget zip unzip libgl1 libglu1-mesa-dev libfreeimage-dev libfreetype6-dev libfontconfig1-dev

      - name: Unzip and rename shared directory
        run: |
          unzip ./3rdParty/Shared-Debian64.zip -d ./3rdParty/
          mv ./3rdParty/GEOM.Vendor ./3rdParty/Shared

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '7.0.x' 
          
      - name: Build .NET Core Project
        run: dotnet build BuildConfigs/PreRequisitesSetup/PreRequisitesSetup.csproj --configuration Release
  
      - name: Run .NET Core Project
        env:
          PRIVATE_ACCESS_TOKEN: ${{ secrets.INHERITED_ACCESS_TOKEN }}
        run: dotnet run --project BuildConfigs/PreRequisitesSetup/PreRequisitesSetup.csproj

      - name: Build # ToDo: Replace with shellScriptPath input
        run: |
          chmod +x ./BuildConfigs/LinuxBuild/LinuxBuild_RELEASE.sh 
          ./BuildConfigs/LinuxBuild/LinuxBuild_RELEASE.sh

      - name: Copy over runtime required libraries # ToDo: Replace with shellScriptPath input
        run: |
          chmod +x ./BuildConfigs/debianPostBuild.sh 
          ./BuildConfigs/debianPostBuild.sh
          
      - name: Zip the binaries
        run: zip -r ubuntu-x64-binaries.zip ./x64/Release

      - name: Attach binaries to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          upload_url: ${{ inputs.upload_url }}
          asset_path: ./ubuntu-x64-binaries.zip
          asset_name: ubuntu-x64-binaries.zip
          asset_content_type: application/zip
